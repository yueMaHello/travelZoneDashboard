#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('te:server');
var http = require('http');
var fs = require('fs');
var readline = require('readline');
const LineByLineReader = require('line-by-line');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3043');
app.set('port', port);
console.log('The app is running on port '+port);


/**
 * Create HTTP server.
 */


var data ={};
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});
var server = http.createServer(app);
var a = null;

rl.question('Did you renew the dataset? (y/n)', (answer) => {

    rl.close();
    a = answer;

    if(a==='y'){
        console.log('The App will read the newest dataset. It may take several minutes.');
        /**
         * Listen on provided port, on all network interfaces.
         */
        var lr = new LineByLineReader('./public/data/trips_1.csv');
        lr.on('error',function(err){});
        lr.on('line',function(line){
            line = line.split(",");
            console.log(line[6]);
            if(line[6] in data){

                data[line[6]]['Person#'][line[18]]+=parseFloat(line[3]);
                data[line[6]]['Mode'][line[14]]+=1;
                data[line[6]]['TourPurp'][line[18]]+=1;
                data[line[6]]['Dist'][line[18]]+= parseFloat(line[3])*parseFloat(line[19]);
                data[line[6]]['IncGrp'][line[21]]+=1;
                data[line[6]]['HHSize'][line[23]]+=1;
                data[line[6]]['Own'][line[20]]+=1;
            }
            else{
                data[line[6]] = {
                    'Person#':{'P':0,'C':0,'W':0,'L':0,'H':0,'R':0,'Q':0,'T':0,'S':0},
                    'Mode':{'Walk':0,'HOV2':0,'SB':0,'PNR':0,'WAT':0,'SOV':0,'Bike':0,'HOV3':0,'KNR':0},
                    'TourPurp':{'P':0,'C':0,'W':0,'L':0,'H':0,'R':0,'Q':0,'T':0,'S':0},
                    'Dist':{'P':0,'C':0,'W':0,'L':0,'H':0,'R':0,'Q':0,'T':0,'S':0},
                    'Own':{'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0},
                    'IncGrp':{'Lo':0,'Med':0,'Hi':0},
                    'HHSize':{'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0},
                };

                data[line[6]]['Person#'][line[18]]+=parseFloat(line[3]);
                data[line[6]]['Mode'][line[14]]+=1;
                data[line[6]]['TourPurp'][line[18]]+=1;
                data[line[6]]['Dist'][line[18]]+= parseFloat(line[3])*parseFloat(line[19]);
                data[line[6]]['IncGrp'][line[21]]+=1;
                data[line[6]]['HHSize'][line[23]]+=1;
                data[line[6]]['Own'][line[20]]+=1;
            }
        });
        lr.on('end',function(){
            var jsonContent = JSON.stringify(data);
            console.log(jsonContent);
            fs.writeFile('./public/data/output.json',jsonContent,'utf8',function(err){
                if(err){
                    console.log('An error occured while writing JSON object to file');
                    return console.log(err)
                }
            });
            console.log('Json file has been saved');

            server.listen(port);
            server.on('error', onError);
            server.on('listening', onListening);
        });
    }
    else{

        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
    }
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
function readDataLineByLine(){

}